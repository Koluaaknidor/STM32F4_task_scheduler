
Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001204  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001414  08001414  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001414  08001414  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001414  08001414  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800141c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  0800148c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800148c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001099  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000653  00000000  00000000  00021139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f77  00000000  00000000  00021b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002414  00000000  00000000  00024a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000096c9  00000000  00000000  00026eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ce0  00000000  00000000  000305cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001384 	.word	0x08001384

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08001384 	.word	0x08001384

080001d8 <led_init_all>:
#include "led.h"

#include<stdint.h>

void led_init_all(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001de:	4b19      	ldr	r3, [pc, #100]	; (8000244 <led_init_all+0x6c>)
 80001e0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001e2:	4b19      	ldr	r3, [pc, #100]	; (8000248 <led_init_all+0x70>)
 80001e4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0208 	orr.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000222:	200c      	movs	r0, #12
 8000224:	f000 f82a 	bl	800027c <led_off>
    led_off(LED_ORANGE);
 8000228:	200d      	movs	r0, #13
 800022a:	f000 f827 	bl	800027c <led_off>
    led_off(LED_RED);
 800022e:	200e      	movs	r0, #14
 8000230:	f000 f824 	bl	800027c <led_off>
    led_off(LED_BLUE);
 8000234:	200f      	movs	r0, #15
 8000236:	f000 f821 	bl	800027c <led_off>



}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023830 	.word	0x40023830
 8000248:	40020c00 	.word	0x40020c00

0800024c <led_on>:

void led_on(uint8_t led_no)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <led_on+0x2c>)
 8000258:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	2101      	movs	r1, #1
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	431a      	orrs	r2, r3
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]

}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40020c14 	.word	0x40020c14

0800027c <led_off>:

void led_off(uint8_t led_no)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <led_off+0x30>)
 8000288:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	79fa      	ldrb	r2, [r7, #7]
 8000290:	2101      	movs	r1, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	401a      	ands	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40020c14 	.word	0x40020c14

080002b0 <main>:
#include <stdio.h>
#include "scheduler.h"
#include "tasks.h"

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
	void (*task_handlers[TASKS_MAX_NUM])() = {idle_task, task0, task1, task2};
 80002b6:	463b      	mov	r3, r7
 80002b8:	2220      	movs	r2, #32
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fb5b 	bl	8000978 <memset>
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <main+0x38>)
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <main+0x3c>)
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <main+0x40>)
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <main+0x44>)
 80002d0:	60fb      	str	r3, [r7, #12]
	//TODO: change to malloc
	scheduler_init(task_handlers, 4);
 80002d2:	463b      	mov	r3, r7
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f80e 	bl	80002f8 <scheduler_init>
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3720      	adds	r7, #32
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	08000869 	.word	0x08000869
 80002ec:	0800086f 	.word	0x0800086f
 80002f0:	08000891 	.word	0x08000891
 80002f4:	080008af 	.word	0x080008af

080002f8 <scheduler_init>:
	.tasks_num = 0,
	.sys_tick_count = 0
};

void scheduler_init(void (**task_handlers)(), uint32_t task_handlers_len)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
	if (task_handlers_len > TASKS_MAX_NUM)
	{
		//TODO: Error logic
	}
	//Set MSP to start of scheduler stack
	uint32_t scheduler_stack_start = (SRAM_END) - (TASK_STACK_SIZE * TASKS_MAX_NUM);
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <scheduler_init+0x60>)
 8000304:	60bb      	str	r3, [r7, #8]
	__asm volatile("MSR MSP, %0"::"r"(scheduler_stack_start));
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	f383 8808 	msr	MSP, r3

	led_init_all();
 800030c:	f7ff ff64 	bl	80001d8 <led_init_all>

	for (int i=0; i<task_handlers_len; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e00a      	b.n	800032c <scheduler_init+0x34>
		add_task(task_handlers[i]);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f81f 	bl	8000364 <add_task>
	for (int i=0; i<task_handlers_len; i++)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3301      	adds	r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d8f0      	bhi.n	8000316 <scheduler_init+0x1e>

	init_stack();
 8000334:	f000 f868 	bl	8000408 <init_stack>

	init_SysTick();
 8000338:	f000 f83a 	bl	80003b0 <init_SysTick>
	//TODO: What if SysTick is generated before switching to psp
	switch_to_psp();
 800033c:	f000 f88c 	bl	8000458 <switch_to_psp>

	//Start the first task
	tasks[tasks_control.current_task].task_handler();
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <scheduler_init+0x64>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a06      	ldr	r2, [pc, #24]	; (8000360 <scheduler_init+0x68>)
 8000346:	011b      	lsls	r3, r3, #4
 8000348:	4413      	add	r3, r2
 800034a:	330c      	adds	r3, #12
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4798      	blx	r3
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2001dff0 	.word	0x2001dff0
 800035c:	20000000 	.word	0x20000000
 8000360:	2000008c 	.word	0x2000008c

08000364 <add_task>:

void add_task(void (*task_handler)())
{
 8000364:	b490      	push	{r4, r7}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	TASK_t task =
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	617b      	str	r3, [r7, #20]
	{
		.state = READY,
		.task_handler = task_handler
	};
	tasks[tasks_control.tasks_num] = task;
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <add_task+0x44>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <add_task+0x48>)
 8000384:	011b      	lsls	r3, r3, #4
 8000386:	4413      	add	r3, r2
 8000388:	461c      	mov	r4, r3
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	tasks_control.tasks_num++;
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <add_task+0x44>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	4a03      	ldr	r2, [pc, #12]	; (80003a8 <add_task+0x44>)
 800039c:	6053      	str	r3, [r2, #4]
}
 800039e:	bf00      	nop
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc90      	pop	{r4, r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000000 	.word	0x20000000
 80003ac:	2000008c 	.word	0x2000008c

080003b0 <init_SysTick>:

void init_SysTick()
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	//Set timer reload value to 16000 - 1
	uint32_t *SYST_RVR = (uint32_t*)0xE000E014;
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <init_SysTick+0x50>)
 80003b8:	607b      	str	r3, [r7, #4]
	*SYST_RVR &= 0xFF000000;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	601a      	str	r2, [r3, #0]
	*SYST_RVR |= (16000000 / SYS_TICK_EXCEPTION_HZ - 1);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f443 5379 	orr.w	r3, r3, #15936	; 0x3e40
 80003ce:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	6013      	str	r3, [r2, #0]

	uint32_t *SYST_CSR = (uint32_t*)0xE000E010;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <init_SysTick+0x54>)
 80003d8:	603b      	str	r3, [r7, #0]
	//Clock source - proc. clock, generate exception
	*SYST_CSR |= (0x3 << 1);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0206 	orr.w	r2, r3, #6
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	601a      	str	r2, [r3, #0]
	//Enable clock
	*SYST_CSR |= 1;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0201 	orr.w	r2, r3, #1
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e014 	.word	0xe000e014
 8000404:	e000e010 	.word	0xe000e010

08000408 <init_stack>:

void init_stack()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	//Set dummy frames and save psp values
	for (int i=0; i<tasks_control.tasks_num; i++)
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e013      	b.n	800043c <init_stack+0x34>
	{
		tasks[i].psp_value = set_dummy_stack_frame(i, (uint32_t)tasks[i].task_handler);
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	490e      	ldr	r1, [pc, #56]	; (8000450 <init_stack+0x48>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	011b      	lsls	r3, r3, #4
 800041c:	440b      	add	r3, r1
 800041e:	330c      	adds	r3, #12
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4619      	mov	r1, r3
 8000424:	4610      	mov	r0, r2
 8000426:	f000 f829 	bl	800047c <set_dummy_stack_frame>
 800042a:	4602      	mov	r2, r0
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <init_stack+0x48>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	440b      	add	r3, r1
 8000434:	601a      	str	r2, [r3, #0]
	for (int i=0; i<tasks_control.tasks_num; i++)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3301      	adds	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <init_stack+0x4c>)
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	429a      	cmp	r2, r3
 8000444:	d8e6      	bhi.n	8000414 <init_stack+0xc>
	}
}
 8000446:	bf00      	nop
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000008c 	.word	0x2000008c
 8000454:	20000000 	.word	0x20000000

08000458 <switch_to_psp>:

__attribute__((naked)) void switch_to_psp()
{
	//Switch to psp, init it to start of the init task start
	__asm volatile("MSR PSP, %0"::"r"(SRAM_END - (TASK_STACK_SIZE * tasks_control.current_task)));
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <switch_to_psp+0x1c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	029a      	lsls	r2, r3, #10
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <switch_to_psp+0x20>)
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	f383 8809 	msr	PSP, r3
	__asm volatile("MOV R0, #0x02");
 8000466:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 800046a:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800046e:	4770      	bx	lr
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	20000000 	.word	0x20000000
 8000478:	2001fff0 	.word	0x2001fff0

0800047c <set_dummy_stack_frame>:

uint32_t* set_dummy_stack_frame(uint32_t task_num, uint32_t PC)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	//TODO: check that no need to set LR in dummy frame.
	uint32_t *stack_pointer = (uint32_t*)((SRAM_END) - (TASK_STACK_SIZE * task_num));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	029a      	lsls	r2, r3, #10
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <set_dummy_stack_frame+0x5c>)
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	60fb      	str	r3, [r7, #12]

	//xPSR
	stack_pointer--;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3b04      	subs	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
	*stack_pointer = 0x01000000;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800049c:	601a      	str	r2, [r3, #0]
	//PC
	stack_pointer--;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3b04      	subs	r3, #4
 80004a2:	60fb      	str	r3, [r7, #12]
	*stack_pointer = PC;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	601a      	str	r2, [r3, #0]

//	stack_pointer--;
//	*stack_pointer = 0xFFFFFFFD;

	//Rest 14 registers
	for(int i=0; i<14; i++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	e008      	b.n	80004c2 <set_dummy_stack_frame+0x46>
	{
		stack_pointer--;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3b04      	subs	r3, #4
 80004b4:	60fb      	str	r3, [r7, #12]
		*stack_pointer = 0;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
	for(int i=0; i<14; i++)
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	3301      	adds	r3, #1
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	2b0d      	cmp	r3, #13
 80004c6:	ddf3      	ble.n	80004b0 <set_dummy_stack_frame+0x34>
	}
	return stack_pointer;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	2001fff0 	.word	0x2001fff0

080004dc <SysTick_Handler>:

void SysTick_Handler()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	tasks_control.sys_tick_count++;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <SysTick_Handler+0x18>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <SysTick_Handler+0x18>)
 80004e8:	6093      	str	r3, [r2, #8]
	schedule_task();
 80004ea:	f000 f8b7 	bl	800065c <schedule_task>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000

080004f8 <PendSV_Handler>:
/*
 * Task scheduling happens here
 */
__attribute__((naked)) void PendSV_Handler()
{
	__asm volatile("PUSH {LR}");
 80004f8:	b500      	push	{lr}
	__asm volatile("BL log_scheduler_state");
 80004fa:	f000 f823 	bl	8000544 <log_scheduler_state>
	__asm volatile("POP {LR}");
 80004fe:	f85d eb04 	ldr.w	lr, [sp], #4

	/*Save prev task*/
	//Get PSP of interrupted task
	__asm volatile("MRS R0, PSP");
 8000502:	f3ef 8009 	mrs	r0, PSP
	//Store the second frame
	__asm volatile("STMDB R0!, {R4-R11}");
 8000506:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Save the new value of PSP
	__asm volatile("MOV %0, R0":"=r"(tasks[tasks_control.current_task].psp_value));
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <PendSV_Handler+0x44>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4602      	mov	r2, r0
 8000510:	490b      	ldr	r1, [pc, #44]	; (8000540 <PendSV_Handler+0x48>)
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	440b      	add	r3, r1
 8000516:	601a      	str	r2, [r3, #0]

	/*Load next task*/
	__asm volatile("PUSH {LR}");
 8000518:	b500      	push	{lr}
	__asm volatile("BL unblock_and_choose_task");
 800051a:	f000 f81b 	bl	8000554 <unblock_and_choose_task>
	__asm volatile("POP {LR}");
 800051e:	f85d eb04 	ldr.w	lr, [sp], #4
	//Get PSP
	__asm volatile("MOV R0, %0"::"r"(tasks[tasks_control.current_task].psp_value));
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <PendSV_Handler+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <PendSV_Handler+0x48>)
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
	//Retrieve r4-r11
	__asm volatile("LDMIA R0!, {R4-R11}");
 8000530:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Set PSP and exit
	__asm volatile("MSR PSP, R0");
 8000534:	f380 8809 	msr	PSP, r0
	//Return (LR is stored with the special value which tells details about returnal from handler)
	__asm volatile("BX LR");
 8000538:	4770      	bx	lr
}
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	2000008c 	.word	0x2000008c

08000544 <log_scheduler_state>:

void log_scheduler_state()
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
		printf("Block count:%lu\n", tasks[i].block_count);
		printf("State:%d\n", tasks[i].state);
	}
	printf("*+*+*+*+*+*+*+*+*+*+*+*+*+**+*+*+*+*+*+*\n\n");
#endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <unblock_and_choose_task>:

void unblock_and_choose_task()
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
	//Unblock all expired blocks
	for (int i=1; i<tasks_control.tasks_num; i++)
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e01b      	b.n	8000598 <unblock_and_choose_task+0x44>
	{
		if (tasks[i].state == BLOCKED)
 8000560:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <unblock_and_choose_task+0xbc>)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	4413      	add	r3, r2
 8000568:	3308      	adds	r3, #8
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2bff      	cmp	r3, #255	; 0xff
 800056e:	d110      	bne.n	8000592 <unblock_and_choose_task+0x3e>
		{
			if (tasks_control.sys_tick_count == tasks[i].block_count)
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <unblock_and_choose_task+0xc0>)
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	4926      	ldr	r1, [pc, #152]	; (8000610 <unblock_and_choose_task+0xbc>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	440b      	add	r3, r1
 800057c:	3304      	adds	r3, #4
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	d106      	bne.n	8000592 <unblock_and_choose_task+0x3e>
			{
				tasks[i].state = READY;
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <unblock_and_choose_task+0xbc>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	4413      	add	r3, r2
 800058c:	3308      	adds	r3, #8
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<tasks_control.tasks_num; i++)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3301      	adds	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <unblock_and_choose_task+0xc0>)
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d8de      	bhi.n	8000560 <unblock_and_choose_task+0xc>
			}
		}
	}

	//Schedule nearest READY task, else schedule idle
	int current_task = tasks_control.current_task;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <unblock_and_choose_task+0xc0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	60bb      	str	r3, [r7, #8]
	TASK_STATE_t task_state_check = BLOCKED;
 80005a8:	23ff      	movs	r3, #255	; 0xff
 80005aa:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<tasks_control.tasks_num - 1; i++)//Iterate tasks_num - 1 times
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	e017      	b.n	80005e2 <unblock_and_choose_task+0x8e>
	{
		current_task++;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
		if (current_task == tasks_control.tasks_num)
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <unblock_and_choose_task+0xc0>)
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d101      	bne.n	80005c6 <unblock_and_choose_task+0x72>
			current_task = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
		if (tasks[current_task].state == READY)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <unblock_and_choose_task+0xbc>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	011b      	lsls	r3, r3, #4
 80005cc:	4413      	add	r3, r2
 80005ce:	3308      	adds	r3, #8
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <unblock_and_choose_task+0x88>
		{
			task_state_check = READY;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
			break;
 80005da:	e008      	b.n	80005ee <unblock_and_choose_task+0x9a>
	for(int i=0; i<tasks_control.tasks_num - 1; i++)//Iterate tasks_num - 1 times
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <unblock_and_choose_task+0xc0>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d8e1      	bhi.n	80005b2 <unblock_and_choose_task+0x5e>
		}
	}
	if (task_state_check == READY)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <unblock_and_choose_task+0xa8>
		tasks_control.current_task = current_task;
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <unblock_and_choose_task+0xc0>)
 80005f8:	6013      	str	r3, [r2, #0]
	else
		tasks_control.current_task = 0;
}
 80005fa:	e002      	b.n	8000602 <unblock_and_choose_task+0xae>
		tasks_control.current_task = 0;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <unblock_and_choose_task+0xc0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000008c 	.word	0x2000008c
 8000614:	20000000 	.word	0x20000000

08000618 <block_task>:

void block_task(uint32_t delay)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//TODO: disable interrupts for the time of accessing shared global data
	tasks[tasks_control.current_task].block_count = tasks_control.sys_tick_count + delay;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <block_task+0x3c>)
 8000622:	6899      	ldr	r1, [r3, #8]
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <block_task+0x3c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	440a      	add	r2, r1
 800062c:	490a      	ldr	r1, [pc, #40]	; (8000658 <block_task+0x40>)
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	440b      	add	r3, r1
 8000632:	3304      	adds	r3, #4
 8000634:	601a      	str	r2, [r3, #0]
	tasks[tasks_control.current_task].state = BLOCKED;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <block_task+0x3c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a07      	ldr	r2, [pc, #28]	; (8000658 <block_task+0x40>)
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	3308      	adds	r3, #8
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	701a      	strb	r2, [r3, #0]

	schedule_task();
 8000646:	f000 f809 	bl	800065c <schedule_task>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	2000008c 	.word	0x2000008c

0800065c <schedule_task>:

void schedule_task()
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
	//PendSV trigger
	uint32_t *ICSR = (uint32_t*)0xE000ED04;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <schedule_task+0x24>)
 8000664:	607b      	str	r3, [r7, #4]
	*ICSR |= (1 << 28);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed04 	.word	0xe000ed04

08000684 <HardFault_Handler>:

void HardFault_Handler()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	printf("HardFault occurred\n");
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <HardFault_Handler+0x44>)
 800068c:	f000 f9ea 	bl	8000a64 <puts>
	while(1)
	{
		led_on(LED_ORANGE);
 8000690:	200d      	movs	r0, #13
 8000692:	f7ff fddb 	bl	800024c <led_on>
		for(int i=0; i<100000; i++);
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e002      	b.n	80006a2 <HardFault_Handler+0x1e>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <HardFault_Handler+0x48>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	ddf8      	ble.n	800069c <HardFault_Handler+0x18>
		led_off(LED_ORANGE);
 80006aa:	200d      	movs	r0, #13
 80006ac:	f7ff fde6 	bl	800027c <led_off>
		for(int i=0; i<100000; i++);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e002      	b.n	80006bc <HardFault_Handler+0x38>
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	4a03      	ldr	r2, [pc, #12]	; (80006cc <HardFault_Handler+0x48>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	ddf8      	ble.n	80006b6 <HardFault_Handler+0x32>
		led_on(LED_ORANGE);
 80006c4:	e7e4      	b.n	8000690 <HardFault_Handler+0xc>
 80006c6:	bf00      	nop
 80006c8:	0800139c 	.word	0x0800139c
 80006cc:	0001869f 	.word	0x0001869f

080006d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <ITM_SendChar+0x48>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <ITM_SendChar+0x48>)
 80006e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <ITM_SendChar+0x4c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <ITM_SendChar+0x4c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006f2:	bf00      	nop
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0f8      	beq.n	80006f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000702:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	6013      	str	r3, [r2, #0]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000edfc 	.word	0xe000edfc
 800071c:	e0000e00 	.word	0xe0000e00

08000720 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00a      	b.n	8000748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000732:	f3af 8000 	nop.w
 8000736:	4601      	mov	r1, r0
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	b2ca      	uxtb	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf0      	blt.n	8000732 <_read+0x12>
  }

  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e009      	b.n	8000780 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffab 	bl	80006d0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf1      	blt.n	800076c <_write+0x12>
  }
  return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_close>:

int _close(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ba:	605a      	str	r2, [r3, #4]
  return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <_isatty>:

int _isatty(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f000 f87a 	bl	8000924 <__errno>
 8000830:	4603      	mov	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20020000 	.word	0x20020000
 800085c:	00000400 	.word	0x00000400
 8000860:	2000010c 	.word	0x2000010c
 8000864:	20000120 	.word	0x20000120

08000868 <idle_task>:
#include "main.h"
#include "led.h"
#include "scheduler.h"

void idle_task()
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	while(1)
 800086c:	e7fe      	b.n	800086c <idle_task+0x4>

0800086e <task0>:

	}
}

void task0()
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff fcea 	bl	800024c <led_on>
		block_task(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f7ff fecc 	bl	8000618 <block_task>
		led_off(LED_GREEN);
 8000880:	200c      	movs	r0, #12
 8000882:	f7ff fcfb 	bl	800027c <led_off>
		block_task(1000);
 8000886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088a:	f7ff fec5 	bl	8000618 <block_task>
		led_on(LED_GREEN);
 800088e:	e7f0      	b.n	8000872 <task0+0x4>

08000890 <task1>:
	}
}

void task1()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000894:	200e      	movs	r0, #14
 8000896:	f7ff fcd9 	bl	800024c <led_on>
		block_task(200);
 800089a:	20c8      	movs	r0, #200	; 0xc8
 800089c:	f7ff febc 	bl	8000618 <block_task>
		led_off(LED_RED);
 80008a0:	200e      	movs	r0, #14
 80008a2:	f7ff fceb 	bl	800027c <led_off>
		block_task(200);
 80008a6:	20c8      	movs	r0, #200	; 0xc8
 80008a8:	f7ff feb6 	bl	8000618 <block_task>
		led_on(LED_RED);
 80008ac:	e7f2      	b.n	8000894 <task1+0x4>

080008ae <task2>:
	}
}

void task2()
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f7ff fcca 	bl	800024c <led_on>
		block_task(400);
 80008b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008bc:	f7ff feac 	bl	8000618 <block_task>
		led_off(LED_BLUE);
 80008c0:	200f      	movs	r0, #15
 80008c2:	f7ff fcdb 	bl	800027c <led_off>
		block_task(400);
 80008c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008ca:	f7ff fea5 	bl	8000618 <block_task>
		led_on(LED_BLUE);
 80008ce:	e7f0      	b.n	80008b2 <task2+0x4>

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fe:	f000 f817 	bl	8000930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fcd5 	bl	80002b0 <main>

08000906 <LoopForever>:

LoopForever:
  b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000914:	0800141c 	.word	0x0800141c
  ldr r2, =_sbss
 8000918:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800091c:	20000120 	.word	0x20000120

08000920 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <__errno>:
 8000924:	4b01      	ldr	r3, [pc, #4]	; (800092c <__errno+0x8>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000000c 	.word	0x2000000c

08000930 <__libc_init_array>:
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	4d0d      	ldr	r5, [pc, #52]	; (8000968 <__libc_init_array+0x38>)
 8000934:	4c0d      	ldr	r4, [pc, #52]	; (800096c <__libc_init_array+0x3c>)
 8000936:	1b64      	subs	r4, r4, r5
 8000938:	10a4      	asrs	r4, r4, #2
 800093a:	2600      	movs	r6, #0
 800093c:	42a6      	cmp	r6, r4
 800093e:	d109      	bne.n	8000954 <__libc_init_array+0x24>
 8000940:	4d0b      	ldr	r5, [pc, #44]	; (8000970 <__libc_init_array+0x40>)
 8000942:	4c0c      	ldr	r4, [pc, #48]	; (8000974 <__libc_init_array+0x44>)
 8000944:	f000 fd1e 	bl	8001384 <_init>
 8000948:	1b64      	subs	r4, r4, r5
 800094a:	10a4      	asrs	r4, r4, #2
 800094c:	2600      	movs	r6, #0
 800094e:	42a6      	cmp	r6, r4
 8000950:	d105      	bne.n	800095e <__libc_init_array+0x2e>
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f855 3b04 	ldr.w	r3, [r5], #4
 8000958:	4798      	blx	r3
 800095a:	3601      	adds	r6, #1
 800095c:	e7ee      	b.n	800093c <__libc_init_array+0xc>
 800095e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000962:	4798      	blx	r3
 8000964:	3601      	adds	r6, #1
 8000966:	e7f2      	b.n	800094e <__libc_init_array+0x1e>
 8000968:	08001414 	.word	0x08001414
 800096c:	08001414 	.word	0x08001414
 8000970:	08001414 	.word	0x08001414
 8000974:	08001418 	.word	0x08001418

08000978 <memset>:
 8000978:	4402      	add	r2, r0
 800097a:	4603      	mov	r3, r0
 800097c:	4293      	cmp	r3, r2
 800097e:	d100      	bne.n	8000982 <memset+0xa>
 8000980:	4770      	bx	lr
 8000982:	f803 1b01 	strb.w	r1, [r3], #1
 8000986:	e7f9      	b.n	800097c <memset+0x4>

08000988 <_puts_r>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	460e      	mov	r6, r1
 800098c:	4605      	mov	r5, r0
 800098e:	b118      	cbz	r0, 8000998 <_puts_r+0x10>
 8000990:	6983      	ldr	r3, [r0, #24]
 8000992:	b90b      	cbnz	r3, 8000998 <_puts_r+0x10>
 8000994:	f000 fa48 	bl	8000e28 <__sinit>
 8000998:	69ab      	ldr	r3, [r5, #24]
 800099a:	68ac      	ldr	r4, [r5, #8]
 800099c:	b913      	cbnz	r3, 80009a4 <_puts_r+0x1c>
 800099e:	4628      	mov	r0, r5
 80009a0:	f000 fa42 	bl	8000e28 <__sinit>
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <_puts_r+0xd0>)
 80009a6:	429c      	cmp	r4, r3
 80009a8:	d120      	bne.n	80009ec <_puts_r+0x64>
 80009aa:	686c      	ldr	r4, [r5, #4]
 80009ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009ae:	07db      	lsls	r3, r3, #31
 80009b0:	d405      	bmi.n	80009be <_puts_r+0x36>
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	0598      	lsls	r0, r3, #22
 80009b6:	d402      	bmi.n	80009be <_puts_r+0x36>
 80009b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ba:	f000 fad3 	bl	8000f64 <__retarget_lock_acquire_recursive>
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	0719      	lsls	r1, r3, #28
 80009c2:	d51d      	bpl.n	8000a00 <_puts_r+0x78>
 80009c4:	6923      	ldr	r3, [r4, #16]
 80009c6:	b1db      	cbz	r3, 8000a00 <_puts_r+0x78>
 80009c8:	3e01      	subs	r6, #1
 80009ca:	68a3      	ldr	r3, [r4, #8]
 80009cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009d0:	3b01      	subs	r3, #1
 80009d2:	60a3      	str	r3, [r4, #8]
 80009d4:	bb39      	cbnz	r1, 8000a26 <_puts_r+0x9e>
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da38      	bge.n	8000a4c <_puts_r+0xc4>
 80009da:	4622      	mov	r2, r4
 80009dc:	210a      	movs	r1, #10
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 f848 	bl	8000a74 <__swbuf_r>
 80009e4:	3001      	adds	r0, #1
 80009e6:	d011      	beq.n	8000a0c <_puts_r+0x84>
 80009e8:	250a      	movs	r5, #10
 80009ea:	e011      	b.n	8000a10 <_puts_r+0x88>
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <_puts_r+0xd4>)
 80009ee:	429c      	cmp	r4, r3
 80009f0:	d101      	bne.n	80009f6 <_puts_r+0x6e>
 80009f2:	68ac      	ldr	r4, [r5, #8]
 80009f4:	e7da      	b.n	80009ac <_puts_r+0x24>
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <_puts_r+0xd8>)
 80009f8:	429c      	cmp	r4, r3
 80009fa:	bf08      	it	eq
 80009fc:	68ec      	ldreq	r4, [r5, #12]
 80009fe:	e7d5      	b.n	80009ac <_puts_r+0x24>
 8000a00:	4621      	mov	r1, r4
 8000a02:	4628      	mov	r0, r5
 8000a04:	f000 f888 	bl	8000b18 <__swsetup_r>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d0dd      	beq.n	80009c8 <_puts_r+0x40>
 8000a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a12:	07da      	lsls	r2, r3, #31
 8000a14:	d405      	bmi.n	8000a22 <_puts_r+0x9a>
 8000a16:	89a3      	ldrh	r3, [r4, #12]
 8000a18:	059b      	lsls	r3, r3, #22
 8000a1a:	d402      	bmi.n	8000a22 <_puts_r+0x9a>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a1e:	f000 faa2 	bl	8000f66 <__retarget_lock_release_recursive>
 8000a22:	4628      	mov	r0, r5
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da04      	bge.n	8000a34 <_puts_r+0xac>
 8000a2a:	69a2      	ldr	r2, [r4, #24]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dc06      	bgt.n	8000a3e <_puts_r+0xb6>
 8000a30:	290a      	cmp	r1, #10
 8000a32:	d004      	beq.n	8000a3e <_puts_r+0xb6>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	6022      	str	r2, [r4, #0]
 8000a3a:	7019      	strb	r1, [r3, #0]
 8000a3c:	e7c5      	b.n	80009ca <_puts_r+0x42>
 8000a3e:	4622      	mov	r2, r4
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 f817 	bl	8000a74 <__swbuf_r>
 8000a46:	3001      	adds	r0, #1
 8000a48:	d1bf      	bne.n	80009ca <_puts_r+0x42>
 8000a4a:	e7df      	b.n	8000a0c <_puts_r+0x84>
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	250a      	movs	r5, #10
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	6022      	str	r2, [r4, #0]
 8000a54:	701d      	strb	r5, [r3, #0]
 8000a56:	e7db      	b.n	8000a10 <_puts_r+0x88>
 8000a58:	080013d4 	.word	0x080013d4
 8000a5c:	080013f4 	.word	0x080013f4
 8000a60:	080013b4 	.word	0x080013b4

08000a64 <puts>:
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <puts+0xc>)
 8000a66:	4601      	mov	r1, r0
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	f7ff bf8d 	b.w	8000988 <_puts_r>
 8000a6e:	bf00      	nop
 8000a70:	2000000c 	.word	0x2000000c

08000a74 <__swbuf_r>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	460e      	mov	r6, r1
 8000a78:	4614      	mov	r4, r2
 8000a7a:	4605      	mov	r5, r0
 8000a7c:	b118      	cbz	r0, 8000a86 <__swbuf_r+0x12>
 8000a7e:	6983      	ldr	r3, [r0, #24]
 8000a80:	b90b      	cbnz	r3, 8000a86 <__swbuf_r+0x12>
 8000a82:	f000 f9d1 	bl	8000e28 <__sinit>
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <__swbuf_r+0x98>)
 8000a88:	429c      	cmp	r4, r3
 8000a8a:	d12b      	bne.n	8000ae4 <__swbuf_r+0x70>
 8000a8c:	686c      	ldr	r4, [r5, #4]
 8000a8e:	69a3      	ldr	r3, [r4, #24]
 8000a90:	60a3      	str	r3, [r4, #8]
 8000a92:	89a3      	ldrh	r3, [r4, #12]
 8000a94:	071a      	lsls	r2, r3, #28
 8000a96:	d52f      	bpl.n	8000af8 <__swbuf_r+0x84>
 8000a98:	6923      	ldr	r3, [r4, #16]
 8000a9a:	b36b      	cbz	r3, 8000af8 <__swbuf_r+0x84>
 8000a9c:	6923      	ldr	r3, [r4, #16]
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	1ac0      	subs	r0, r0, r3
 8000aa2:	6963      	ldr	r3, [r4, #20]
 8000aa4:	b2f6      	uxtb	r6, r6
 8000aa6:	4283      	cmp	r3, r0
 8000aa8:	4637      	mov	r7, r6
 8000aaa:	dc04      	bgt.n	8000ab6 <__swbuf_r+0x42>
 8000aac:	4621      	mov	r1, r4
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f000 f926 	bl	8000d00 <_fflush_r>
 8000ab4:	bb30      	cbnz	r0, 8000b04 <__swbuf_r+0x90>
 8000ab6:	68a3      	ldr	r3, [r4, #8]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	60a3      	str	r3, [r4, #8]
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	6022      	str	r2, [r4, #0]
 8000ac2:	701e      	strb	r6, [r3, #0]
 8000ac4:	6963      	ldr	r3, [r4, #20]
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	4283      	cmp	r3, r0
 8000aca:	d004      	beq.n	8000ad6 <__swbuf_r+0x62>
 8000acc:	89a3      	ldrh	r3, [r4, #12]
 8000ace:	07db      	lsls	r3, r3, #31
 8000ad0:	d506      	bpl.n	8000ae0 <__swbuf_r+0x6c>
 8000ad2:	2e0a      	cmp	r6, #10
 8000ad4:	d104      	bne.n	8000ae0 <__swbuf_r+0x6c>
 8000ad6:	4621      	mov	r1, r4
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f000 f911 	bl	8000d00 <_fflush_r>
 8000ade:	b988      	cbnz	r0, 8000b04 <__swbuf_r+0x90>
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <__swbuf_r+0x9c>)
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	d101      	bne.n	8000aee <__swbuf_r+0x7a>
 8000aea:	68ac      	ldr	r4, [r5, #8]
 8000aec:	e7cf      	b.n	8000a8e <__swbuf_r+0x1a>
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <__swbuf_r+0xa0>)
 8000af0:	429c      	cmp	r4, r3
 8000af2:	bf08      	it	eq
 8000af4:	68ec      	ldreq	r4, [r5, #12]
 8000af6:	e7ca      	b.n	8000a8e <__swbuf_r+0x1a>
 8000af8:	4621      	mov	r1, r4
 8000afa:	4628      	mov	r0, r5
 8000afc:	f000 f80c 	bl	8000b18 <__swsetup_r>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d0cb      	beq.n	8000a9c <__swbuf_r+0x28>
 8000b04:	f04f 37ff 	mov.w	r7, #4294967295
 8000b08:	e7ea      	b.n	8000ae0 <__swbuf_r+0x6c>
 8000b0a:	bf00      	nop
 8000b0c:	080013d4 	.word	0x080013d4
 8000b10:	080013f4 	.word	0x080013f4
 8000b14:	080013b4 	.word	0x080013b4

08000b18 <__swsetup_r>:
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <__swsetup_r+0xcc>)
 8000b1a:	b570      	push	{r4, r5, r6, lr}
 8000b1c:	681d      	ldr	r5, [r3, #0]
 8000b1e:	4606      	mov	r6, r0
 8000b20:	460c      	mov	r4, r1
 8000b22:	b125      	cbz	r5, 8000b2e <__swsetup_r+0x16>
 8000b24:	69ab      	ldr	r3, [r5, #24]
 8000b26:	b913      	cbnz	r3, 8000b2e <__swsetup_r+0x16>
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f000 f97d 	bl	8000e28 <__sinit>
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <__swsetup_r+0xd0>)
 8000b30:	429c      	cmp	r4, r3
 8000b32:	d10f      	bne.n	8000b54 <__swsetup_r+0x3c>
 8000b34:	686c      	ldr	r4, [r5, #4]
 8000b36:	89a3      	ldrh	r3, [r4, #12]
 8000b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b3c:	0719      	lsls	r1, r3, #28
 8000b3e:	d42c      	bmi.n	8000b9a <__swsetup_r+0x82>
 8000b40:	06dd      	lsls	r5, r3, #27
 8000b42:	d411      	bmi.n	8000b68 <__swsetup_r+0x50>
 8000b44:	2309      	movs	r3, #9
 8000b46:	6033      	str	r3, [r6, #0]
 8000b48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b4c:	81a3      	strh	r3, [r4, #12]
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	e03e      	b.n	8000bd2 <__swsetup_r+0xba>
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <__swsetup_r+0xd4>)
 8000b56:	429c      	cmp	r4, r3
 8000b58:	d101      	bne.n	8000b5e <__swsetup_r+0x46>
 8000b5a:	68ac      	ldr	r4, [r5, #8]
 8000b5c:	e7eb      	b.n	8000b36 <__swsetup_r+0x1e>
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <__swsetup_r+0xd8>)
 8000b60:	429c      	cmp	r4, r3
 8000b62:	bf08      	it	eq
 8000b64:	68ec      	ldreq	r4, [r5, #12]
 8000b66:	e7e6      	b.n	8000b36 <__swsetup_r+0x1e>
 8000b68:	0758      	lsls	r0, r3, #29
 8000b6a:	d512      	bpl.n	8000b92 <__swsetup_r+0x7a>
 8000b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b6e:	b141      	cbz	r1, 8000b82 <__swsetup_r+0x6a>
 8000b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d002      	beq.n	8000b7e <__swsetup_r+0x66>
 8000b78:	4630      	mov	r0, r6
 8000b7a:	f000 fa5b 	bl	8001034 <_free_r>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6363      	str	r3, [r4, #52]	; 0x34
 8000b82:	89a3      	ldrh	r3, [r4, #12]
 8000b84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b88:	81a3      	strh	r3, [r4, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6063      	str	r3, [r4, #4]
 8000b8e:	6923      	ldr	r3, [r4, #16]
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	89a3      	ldrh	r3, [r4, #12]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	81a3      	strh	r3, [r4, #12]
 8000b9a:	6923      	ldr	r3, [r4, #16]
 8000b9c:	b94b      	cbnz	r3, 8000bb2 <__swsetup_r+0x9a>
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba8:	d003      	beq.n	8000bb2 <__swsetup_r+0x9a>
 8000baa:	4621      	mov	r1, r4
 8000bac:	4630      	mov	r0, r6
 8000bae:	f000 fa01 	bl	8000fb4 <__smakebuf_r>
 8000bb2:	89a0      	ldrh	r0, [r4, #12]
 8000bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bb8:	f010 0301 	ands.w	r3, r0, #1
 8000bbc:	d00a      	beq.n	8000bd4 <__swsetup_r+0xbc>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60a3      	str	r3, [r4, #8]
 8000bc2:	6963      	ldr	r3, [r4, #20]
 8000bc4:	425b      	negs	r3, r3
 8000bc6:	61a3      	str	r3, [r4, #24]
 8000bc8:	6923      	ldr	r3, [r4, #16]
 8000bca:	b943      	cbnz	r3, 8000bde <__swsetup_r+0xc6>
 8000bcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bd0:	d1ba      	bne.n	8000b48 <__swsetup_r+0x30>
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	0781      	lsls	r1, r0, #30
 8000bd6:	bf58      	it	pl
 8000bd8:	6963      	ldrpl	r3, [r4, #20]
 8000bda:	60a3      	str	r3, [r4, #8]
 8000bdc:	e7f4      	b.n	8000bc8 <__swsetup_r+0xb0>
 8000bde:	2000      	movs	r0, #0
 8000be0:	e7f7      	b.n	8000bd2 <__swsetup_r+0xba>
 8000be2:	bf00      	nop
 8000be4:	2000000c 	.word	0x2000000c
 8000be8:	080013d4 	.word	0x080013d4
 8000bec:	080013f4 	.word	0x080013f4
 8000bf0:	080013b4 	.word	0x080013b4

08000bf4 <__sflush_r>:
 8000bf4:	898a      	ldrh	r2, [r1, #12]
 8000bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bfa:	4605      	mov	r5, r0
 8000bfc:	0710      	lsls	r0, r2, #28
 8000bfe:	460c      	mov	r4, r1
 8000c00:	d458      	bmi.n	8000cb4 <__sflush_r+0xc0>
 8000c02:	684b      	ldr	r3, [r1, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	dc05      	bgt.n	8000c14 <__sflush_r+0x20>
 8000c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	dc02      	bgt.n	8000c14 <__sflush_r+0x20>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0f9      	beq.n	8000c0e <__sflush_r+0x1a>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c20:	682f      	ldr	r7, [r5, #0]
 8000c22:	602b      	str	r3, [r5, #0]
 8000c24:	d032      	beq.n	8000c8c <__sflush_r+0x98>
 8000c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	075a      	lsls	r2, r3, #29
 8000c2c:	d505      	bpl.n	8000c3a <__sflush_r+0x46>
 8000c2e:	6863      	ldr	r3, [r4, #4]
 8000c30:	1ac0      	subs	r0, r0, r3
 8000c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c34:	b10b      	cbz	r3, 8000c3a <__sflush_r+0x46>
 8000c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c38:	1ac0      	subs	r0, r0, r3
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c40:	6a21      	ldr	r1, [r4, #32]
 8000c42:	4628      	mov	r0, r5
 8000c44:	47b0      	blx	r6
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	d106      	bne.n	8000c5a <__sflush_r+0x66>
 8000c4c:	6829      	ldr	r1, [r5, #0]
 8000c4e:	291d      	cmp	r1, #29
 8000c50:	d82c      	bhi.n	8000cac <__sflush_r+0xb8>
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <__sflush_r+0x108>)
 8000c54:	40ca      	lsrs	r2, r1
 8000c56:	07d6      	lsls	r6, r2, #31
 8000c58:	d528      	bpl.n	8000cac <__sflush_r+0xb8>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	6062      	str	r2, [r4, #4]
 8000c5e:	04d9      	lsls	r1, r3, #19
 8000c60:	6922      	ldr	r2, [r4, #16]
 8000c62:	6022      	str	r2, [r4, #0]
 8000c64:	d504      	bpl.n	8000c70 <__sflush_r+0x7c>
 8000c66:	1c42      	adds	r2, r0, #1
 8000c68:	d101      	bne.n	8000c6e <__sflush_r+0x7a>
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	b903      	cbnz	r3, 8000c70 <__sflush_r+0x7c>
 8000c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8000c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c72:	602f      	str	r7, [r5, #0]
 8000c74:	2900      	cmp	r1, #0
 8000c76:	d0ca      	beq.n	8000c0e <__sflush_r+0x1a>
 8000c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d002      	beq.n	8000c86 <__sflush_r+0x92>
 8000c80:	4628      	mov	r0, r5
 8000c82:	f000 f9d7 	bl	8001034 <_free_r>
 8000c86:	2000      	movs	r0, #0
 8000c88:	6360      	str	r0, [r4, #52]	; 0x34
 8000c8a:	e7c1      	b.n	8000c10 <__sflush_r+0x1c>
 8000c8c:	6a21      	ldr	r1, [r4, #32]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4628      	mov	r0, r5
 8000c92:	47b0      	blx	r6
 8000c94:	1c41      	adds	r1, r0, #1
 8000c96:	d1c7      	bne.n	8000c28 <__sflush_r+0x34>
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0c4      	beq.n	8000c28 <__sflush_r+0x34>
 8000c9e:	2b1d      	cmp	r3, #29
 8000ca0:	d001      	beq.n	8000ca6 <__sflush_r+0xb2>
 8000ca2:	2b16      	cmp	r3, #22
 8000ca4:	d101      	bne.n	8000caa <__sflush_r+0xb6>
 8000ca6:	602f      	str	r7, [r5, #0]
 8000ca8:	e7b1      	b.n	8000c0e <__sflush_r+0x1a>
 8000caa:	89a3      	ldrh	r3, [r4, #12]
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	81a3      	strh	r3, [r4, #12]
 8000cb2:	e7ad      	b.n	8000c10 <__sflush_r+0x1c>
 8000cb4:	690f      	ldr	r7, [r1, #16]
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d0a9      	beq.n	8000c0e <__sflush_r+0x1a>
 8000cba:	0793      	lsls	r3, r2, #30
 8000cbc:	680e      	ldr	r6, [r1, #0]
 8000cbe:	bf08      	it	eq
 8000cc0:	694b      	ldreq	r3, [r1, #20]
 8000cc2:	600f      	str	r7, [r1, #0]
 8000cc4:	bf18      	it	ne
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	eba6 0807 	sub.w	r8, r6, r7
 8000ccc:	608b      	str	r3, [r1, #8]
 8000cce:	f1b8 0f00 	cmp.w	r8, #0
 8000cd2:	dd9c      	ble.n	8000c0e <__sflush_r+0x1a>
 8000cd4:	6a21      	ldr	r1, [r4, #32]
 8000cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000cd8:	4643      	mov	r3, r8
 8000cda:	463a      	mov	r2, r7
 8000cdc:	4628      	mov	r0, r5
 8000cde:	47b0      	blx	r6
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	dc06      	bgt.n	8000cf2 <__sflush_r+0xfe>
 8000ce4:	89a3      	ldrh	r3, [r4, #12]
 8000ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cea:	81a3      	strh	r3, [r4, #12]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	e78e      	b.n	8000c10 <__sflush_r+0x1c>
 8000cf2:	4407      	add	r7, r0
 8000cf4:	eba8 0800 	sub.w	r8, r8, r0
 8000cf8:	e7e9      	b.n	8000cce <__sflush_r+0xda>
 8000cfa:	bf00      	nop
 8000cfc:	20400001 	.word	0x20400001

08000d00 <_fflush_r>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	690b      	ldr	r3, [r1, #16]
 8000d04:	4605      	mov	r5, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	b913      	cbnz	r3, 8000d10 <_fflush_r+0x10>
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	bd38      	pop	{r3, r4, r5, pc}
 8000d10:	b118      	cbz	r0, 8000d1a <_fflush_r+0x1a>
 8000d12:	6983      	ldr	r3, [r0, #24]
 8000d14:	b90b      	cbnz	r3, 8000d1a <_fflush_r+0x1a>
 8000d16:	f000 f887 	bl	8000e28 <__sinit>
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <_fflush_r+0x6c>)
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d11b      	bne.n	8000d58 <_fflush_r+0x58>
 8000d20:	686c      	ldr	r4, [r5, #4]
 8000d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0ef      	beq.n	8000d0a <_fflush_r+0xa>
 8000d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d2c:	07d0      	lsls	r0, r2, #31
 8000d2e:	d404      	bmi.n	8000d3a <_fflush_r+0x3a>
 8000d30:	0599      	lsls	r1, r3, #22
 8000d32:	d402      	bmi.n	8000d3a <_fflush_r+0x3a>
 8000d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d36:	f000 f915 	bl	8000f64 <__retarget_lock_acquire_recursive>
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	4621      	mov	r1, r4
 8000d3e:	f7ff ff59 	bl	8000bf4 <__sflush_r>
 8000d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d44:	07da      	lsls	r2, r3, #31
 8000d46:	4605      	mov	r5, r0
 8000d48:	d4e0      	bmi.n	8000d0c <_fflush_r+0xc>
 8000d4a:	89a3      	ldrh	r3, [r4, #12]
 8000d4c:	059b      	lsls	r3, r3, #22
 8000d4e:	d4dd      	bmi.n	8000d0c <_fflush_r+0xc>
 8000d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d52:	f000 f908 	bl	8000f66 <__retarget_lock_release_recursive>
 8000d56:	e7d9      	b.n	8000d0c <_fflush_r+0xc>
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <_fflush_r+0x70>)
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	d101      	bne.n	8000d62 <_fflush_r+0x62>
 8000d5e:	68ac      	ldr	r4, [r5, #8]
 8000d60:	e7df      	b.n	8000d22 <_fflush_r+0x22>
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <_fflush_r+0x74>)
 8000d64:	429c      	cmp	r4, r3
 8000d66:	bf08      	it	eq
 8000d68:	68ec      	ldreq	r4, [r5, #12]
 8000d6a:	e7da      	b.n	8000d22 <_fflush_r+0x22>
 8000d6c:	080013d4 	.word	0x080013d4
 8000d70:	080013f4 	.word	0x080013f4
 8000d74:	080013b4 	.word	0x080013b4

08000d78 <std>:
 8000d78:	2300      	movs	r3, #0
 8000d7a:	b510      	push	{r4, lr}
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8000d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d86:	6083      	str	r3, [r0, #8]
 8000d88:	8181      	strh	r1, [r0, #12]
 8000d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8000d8c:	81c2      	strh	r2, [r0, #14]
 8000d8e:	6183      	str	r3, [r0, #24]
 8000d90:	4619      	mov	r1, r3
 8000d92:	2208      	movs	r2, #8
 8000d94:	305c      	adds	r0, #92	; 0x5c
 8000d96:	f7ff fdef 	bl	8000978 <memset>
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <std+0x38>)
 8000d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <std+0x3c>)
 8000da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <std+0x40>)
 8000da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <std+0x44>)
 8000da8:	6224      	str	r4, [r4, #32]
 8000daa:	6323      	str	r3, [r4, #48]	; 0x30
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	bf00      	nop
 8000db0:	08001215 	.word	0x08001215
 8000db4:	08001237 	.word	0x08001237
 8000db8:	0800126f 	.word	0x0800126f
 8000dbc:	08001293 	.word	0x08001293

08000dc0 <_cleanup_r>:
 8000dc0:	4901      	ldr	r1, [pc, #4]	; (8000dc8 <_cleanup_r+0x8>)
 8000dc2:	f000 b8af 	b.w	8000f24 <_fwalk_reent>
 8000dc6:	bf00      	nop
 8000dc8:	08000d01 	.word	0x08000d01

08000dcc <__sfmoreglue>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	2268      	movs	r2, #104	; 0x68
 8000dd0:	1e4d      	subs	r5, r1, #1
 8000dd2:	4355      	muls	r5, r2
 8000dd4:	460e      	mov	r6, r1
 8000dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000dda:	f000 f997 	bl	800110c <_malloc_r>
 8000dde:	4604      	mov	r4, r0
 8000de0:	b140      	cbz	r0, 8000df4 <__sfmoreglue+0x28>
 8000de2:	2100      	movs	r1, #0
 8000de4:	e9c0 1600 	strd	r1, r6, [r0]
 8000de8:	300c      	adds	r0, #12
 8000dea:	60a0      	str	r0, [r4, #8]
 8000dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000df0:	f7ff fdc2 	bl	8000978 <memset>
 8000df4:	4620      	mov	r0, r4
 8000df6:	bd70      	pop	{r4, r5, r6, pc}

08000df8 <__sfp_lock_acquire>:
 8000df8:	4801      	ldr	r0, [pc, #4]	; (8000e00 <__sfp_lock_acquire+0x8>)
 8000dfa:	f000 b8b3 	b.w	8000f64 <__retarget_lock_acquire_recursive>
 8000dfe:	bf00      	nop
 8000e00:	20000111 	.word	0x20000111

08000e04 <__sfp_lock_release>:
 8000e04:	4801      	ldr	r0, [pc, #4]	; (8000e0c <__sfp_lock_release+0x8>)
 8000e06:	f000 b8ae 	b.w	8000f66 <__retarget_lock_release_recursive>
 8000e0a:	bf00      	nop
 8000e0c:	20000111 	.word	0x20000111

08000e10 <__sinit_lock_acquire>:
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <__sinit_lock_acquire+0x8>)
 8000e12:	f000 b8a7 	b.w	8000f64 <__retarget_lock_acquire_recursive>
 8000e16:	bf00      	nop
 8000e18:	20000112 	.word	0x20000112

08000e1c <__sinit_lock_release>:
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <__sinit_lock_release+0x8>)
 8000e1e:	f000 b8a2 	b.w	8000f66 <__retarget_lock_release_recursive>
 8000e22:	bf00      	nop
 8000e24:	20000112 	.word	0x20000112

08000e28 <__sinit>:
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	f7ff fff0 	bl	8000e10 <__sinit_lock_acquire>
 8000e30:	69a3      	ldr	r3, [r4, #24]
 8000e32:	b11b      	cbz	r3, 8000e3c <__sinit+0x14>
 8000e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e38:	f7ff bff0 	b.w	8000e1c <__sinit_lock_release>
 8000e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e40:	6523      	str	r3, [r4, #80]	; 0x50
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <__sinit+0x68>)
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <__sinit+0x6c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	bf04      	itt	eq
 8000e4e:	2301      	moveq	r3, #1
 8000e50:	61a3      	streq	r3, [r4, #24]
 8000e52:	4620      	mov	r0, r4
 8000e54:	f000 f820 	bl	8000e98 <__sfp>
 8000e58:	6060      	str	r0, [r4, #4]
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f000 f81c 	bl	8000e98 <__sfp>
 8000e60:	60a0      	str	r0, [r4, #8]
 8000e62:	4620      	mov	r0, r4
 8000e64:	f000 f818 	bl	8000e98 <__sfp>
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60e0      	str	r0, [r4, #12]
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	6860      	ldr	r0, [r4, #4]
 8000e70:	f7ff ff82 	bl	8000d78 <std>
 8000e74:	68a0      	ldr	r0, [r4, #8]
 8000e76:	2201      	movs	r2, #1
 8000e78:	2109      	movs	r1, #9
 8000e7a:	f7ff ff7d 	bl	8000d78 <std>
 8000e7e:	68e0      	ldr	r0, [r4, #12]
 8000e80:	2202      	movs	r2, #2
 8000e82:	2112      	movs	r1, #18
 8000e84:	f7ff ff78 	bl	8000d78 <std>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61a3      	str	r3, [r4, #24]
 8000e8c:	e7d2      	b.n	8000e34 <__sinit+0xc>
 8000e8e:	bf00      	nop
 8000e90:	080013b0 	.word	0x080013b0
 8000e94:	08000dc1 	.word	0x08000dc1

08000e98 <__sfp>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	4607      	mov	r7, r0
 8000e9c:	f7ff ffac 	bl	8000df8 <__sfp_lock_acquire>
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <__sfp+0x84>)
 8000ea2:	681e      	ldr	r6, [r3, #0]
 8000ea4:	69b3      	ldr	r3, [r6, #24]
 8000ea6:	b913      	cbnz	r3, 8000eae <__sfp+0x16>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f7ff ffbd 	bl	8000e28 <__sinit>
 8000eae:	3648      	adds	r6, #72	; 0x48
 8000eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	d503      	bpl.n	8000ec0 <__sfp+0x28>
 8000eb8:	6833      	ldr	r3, [r6, #0]
 8000eba:	b30b      	cbz	r3, 8000f00 <__sfp+0x68>
 8000ebc:	6836      	ldr	r6, [r6, #0]
 8000ebe:	e7f7      	b.n	8000eb0 <__sfp+0x18>
 8000ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ec4:	b9d5      	cbnz	r5, 8000efc <__sfp+0x64>
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <__sfp+0x88>)
 8000ec8:	60e3      	str	r3, [r4, #12]
 8000eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ece:	6665      	str	r5, [r4, #100]	; 0x64
 8000ed0:	f000 f847 	bl	8000f62 <__retarget_lock_init_recursive>
 8000ed4:	f7ff ff96 	bl	8000e04 <__sfp_lock_release>
 8000ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ee0:	6025      	str	r5, [r4, #0]
 8000ee2:	61a5      	str	r5, [r4, #24]
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000eec:	f7ff fd44 	bl	8000978 <memset>
 8000ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ef8:	4620      	mov	r0, r4
 8000efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000efc:	3468      	adds	r4, #104	; 0x68
 8000efe:	e7d9      	b.n	8000eb4 <__sfp+0x1c>
 8000f00:	2104      	movs	r1, #4
 8000f02:	4638      	mov	r0, r7
 8000f04:	f7ff ff62 	bl	8000dcc <__sfmoreglue>
 8000f08:	4604      	mov	r4, r0
 8000f0a:	6030      	str	r0, [r6, #0]
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d1d5      	bne.n	8000ebc <__sfp+0x24>
 8000f10:	f7ff ff78 	bl	8000e04 <__sfp_lock_release>
 8000f14:	230c      	movs	r3, #12
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	e7ee      	b.n	8000ef8 <__sfp+0x60>
 8000f1a:	bf00      	nop
 8000f1c:	080013b0 	.word	0x080013b0
 8000f20:	ffff0001 	.word	0xffff0001

08000f24 <_fwalk_reent>:
 8000f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f28:	4606      	mov	r6, r0
 8000f2a:	4688      	mov	r8, r1
 8000f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f30:	2700      	movs	r7, #0
 8000f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f36:	f1b9 0901 	subs.w	r9, r9, #1
 8000f3a:	d505      	bpl.n	8000f48 <_fwalk_reent+0x24>
 8000f3c:	6824      	ldr	r4, [r4, #0]
 8000f3e:	2c00      	cmp	r4, #0
 8000f40:	d1f7      	bne.n	8000f32 <_fwalk_reent+0xe>
 8000f42:	4638      	mov	r0, r7
 8000f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f48:	89ab      	ldrh	r3, [r5, #12]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d907      	bls.n	8000f5e <_fwalk_reent+0x3a>
 8000f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f52:	3301      	adds	r3, #1
 8000f54:	d003      	beq.n	8000f5e <_fwalk_reent+0x3a>
 8000f56:	4629      	mov	r1, r5
 8000f58:	4630      	mov	r0, r6
 8000f5a:	47c0      	blx	r8
 8000f5c:	4307      	orrs	r7, r0
 8000f5e:	3568      	adds	r5, #104	; 0x68
 8000f60:	e7e9      	b.n	8000f36 <_fwalk_reent+0x12>

08000f62 <__retarget_lock_init_recursive>:
 8000f62:	4770      	bx	lr

08000f64 <__retarget_lock_acquire_recursive>:
 8000f64:	4770      	bx	lr

08000f66 <__retarget_lock_release_recursive>:
 8000f66:	4770      	bx	lr

08000f68 <__swhatbuf_r>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	460e      	mov	r6, r1
 8000f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f70:	2900      	cmp	r1, #0
 8000f72:	b096      	sub	sp, #88	; 0x58
 8000f74:	4614      	mov	r4, r2
 8000f76:	461d      	mov	r5, r3
 8000f78:	da08      	bge.n	8000f8c <__swhatbuf_r+0x24>
 8000f7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	602a      	str	r2, [r5, #0]
 8000f82:	061a      	lsls	r2, r3, #24
 8000f84:	d410      	bmi.n	8000fa8 <__swhatbuf_r+0x40>
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	e00e      	b.n	8000faa <__swhatbuf_r+0x42>
 8000f8c:	466a      	mov	r2, sp
 8000f8e:	f000 f9a7 	bl	80012e0 <_fstat_r>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	dbf1      	blt.n	8000f7a <__swhatbuf_r+0x12>
 8000f96:	9a01      	ldr	r2, [sp, #4]
 8000f98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000fa0:	425a      	negs	r2, r3
 8000fa2:	415a      	adcs	r2, r3
 8000fa4:	602a      	str	r2, [r5, #0]
 8000fa6:	e7ee      	b.n	8000f86 <__swhatbuf_r+0x1e>
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	2000      	movs	r0, #0
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	b016      	add	sp, #88	; 0x58
 8000fb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fb4 <__smakebuf_r>:
 8000fb4:	898b      	ldrh	r3, [r1, #12]
 8000fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fb8:	079d      	lsls	r5, r3, #30
 8000fba:	4606      	mov	r6, r0
 8000fbc:	460c      	mov	r4, r1
 8000fbe:	d507      	bpl.n	8000fd0 <__smakebuf_r+0x1c>
 8000fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	6123      	str	r3, [r4, #16]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	6163      	str	r3, [r4, #20]
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	ab01      	add	r3, sp, #4
 8000fd2:	466a      	mov	r2, sp
 8000fd4:	f7ff ffc8 	bl	8000f68 <__swhatbuf_r>
 8000fd8:	9900      	ldr	r1, [sp, #0]
 8000fda:	4605      	mov	r5, r0
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f000 f895 	bl	800110c <_malloc_r>
 8000fe2:	b948      	cbnz	r0, 8000ff8 <__smakebuf_r+0x44>
 8000fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fe8:	059a      	lsls	r2, r3, #22
 8000fea:	d4ef      	bmi.n	8000fcc <__smakebuf_r+0x18>
 8000fec:	f023 0303 	bic.w	r3, r3, #3
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	81a3      	strh	r3, [r4, #12]
 8000ff6:	e7e3      	b.n	8000fc0 <__smakebuf_r+0xc>
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <__smakebuf_r+0x7c>)
 8000ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	6020      	str	r0, [r4, #0]
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	81a3      	strh	r3, [r4, #12]
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	6163      	str	r3, [r4, #20]
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	6120      	str	r0, [r4, #16]
 800100e:	b15b      	cbz	r3, 8001028 <__smakebuf_r+0x74>
 8001010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001014:	4630      	mov	r0, r6
 8001016:	f000 f975 	bl	8001304 <_isatty_r>
 800101a:	b128      	cbz	r0, 8001028 <__smakebuf_r+0x74>
 800101c:	89a3      	ldrh	r3, [r4, #12]
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	81a3      	strh	r3, [r4, #12]
 8001028:	89a0      	ldrh	r0, [r4, #12]
 800102a:	4305      	orrs	r5, r0
 800102c:	81a5      	strh	r5, [r4, #12]
 800102e:	e7cd      	b.n	8000fcc <__smakebuf_r+0x18>
 8001030:	08000dc1 	.word	0x08000dc1

08001034 <_free_r>:
 8001034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001036:	2900      	cmp	r1, #0
 8001038:	d044      	beq.n	80010c4 <_free_r+0x90>
 800103a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800103e:	9001      	str	r0, [sp, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f1a1 0404 	sub.w	r4, r1, #4
 8001046:	bfb8      	it	lt
 8001048:	18e4      	addlt	r4, r4, r3
 800104a:	f000 f97d 	bl	8001348 <__malloc_lock>
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <_free_r+0x94>)
 8001050:	9801      	ldr	r0, [sp, #4]
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	b933      	cbnz	r3, 8001064 <_free_r+0x30>
 8001056:	6063      	str	r3, [r4, #4]
 8001058:	6014      	str	r4, [r2, #0]
 800105a:	b003      	add	sp, #12
 800105c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001060:	f000 b978 	b.w	8001354 <__malloc_unlock>
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <_free_r+0x46>
 8001068:	6825      	ldr	r5, [r4, #0]
 800106a:	1961      	adds	r1, r4, r5
 800106c:	428b      	cmp	r3, r1
 800106e:	bf01      	itttt	eq
 8001070:	6819      	ldreq	r1, [r3, #0]
 8001072:	685b      	ldreq	r3, [r3, #4]
 8001074:	1949      	addeq	r1, r1, r5
 8001076:	6021      	streq	r1, [r4, #0]
 8001078:	e7ed      	b.n	8001056 <_free_r+0x22>
 800107a:	461a      	mov	r2, r3
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	b10b      	cbz	r3, 8001084 <_free_r+0x50>
 8001080:	42a3      	cmp	r3, r4
 8001082:	d9fa      	bls.n	800107a <_free_r+0x46>
 8001084:	6811      	ldr	r1, [r2, #0]
 8001086:	1855      	adds	r5, r2, r1
 8001088:	42a5      	cmp	r5, r4
 800108a:	d10b      	bne.n	80010a4 <_free_r+0x70>
 800108c:	6824      	ldr	r4, [r4, #0]
 800108e:	4421      	add	r1, r4
 8001090:	1854      	adds	r4, r2, r1
 8001092:	42a3      	cmp	r3, r4
 8001094:	6011      	str	r1, [r2, #0]
 8001096:	d1e0      	bne.n	800105a <_free_r+0x26>
 8001098:	681c      	ldr	r4, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	6053      	str	r3, [r2, #4]
 800109e:	4421      	add	r1, r4
 80010a0:	6011      	str	r1, [r2, #0]
 80010a2:	e7da      	b.n	800105a <_free_r+0x26>
 80010a4:	d902      	bls.n	80010ac <_free_r+0x78>
 80010a6:	230c      	movs	r3, #12
 80010a8:	6003      	str	r3, [r0, #0]
 80010aa:	e7d6      	b.n	800105a <_free_r+0x26>
 80010ac:	6825      	ldr	r5, [r4, #0]
 80010ae:	1961      	adds	r1, r4, r5
 80010b0:	428b      	cmp	r3, r1
 80010b2:	bf04      	itt	eq
 80010b4:	6819      	ldreq	r1, [r3, #0]
 80010b6:	685b      	ldreq	r3, [r3, #4]
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	bf04      	itt	eq
 80010bc:	1949      	addeq	r1, r1, r5
 80010be:	6021      	streq	r1, [r4, #0]
 80010c0:	6054      	str	r4, [r2, #4]
 80010c2:	e7ca      	b.n	800105a <_free_r+0x26>
 80010c4:	b003      	add	sp, #12
 80010c6:	bd30      	pop	{r4, r5, pc}
 80010c8:	20000114 	.word	0x20000114

080010cc <sbrk_aligned>:
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	4e0e      	ldr	r6, [pc, #56]	; (8001108 <sbrk_aligned+0x3c>)
 80010d0:	460c      	mov	r4, r1
 80010d2:	6831      	ldr	r1, [r6, #0]
 80010d4:	4605      	mov	r5, r0
 80010d6:	b911      	cbnz	r1, 80010de <sbrk_aligned+0x12>
 80010d8:	f000 f88c 	bl	80011f4 <_sbrk_r>
 80010dc:	6030      	str	r0, [r6, #0]
 80010de:	4621      	mov	r1, r4
 80010e0:	4628      	mov	r0, r5
 80010e2:	f000 f887 	bl	80011f4 <_sbrk_r>
 80010e6:	1c43      	adds	r3, r0, #1
 80010e8:	d00a      	beq.n	8001100 <sbrk_aligned+0x34>
 80010ea:	1cc4      	adds	r4, r0, #3
 80010ec:	f024 0403 	bic.w	r4, r4, #3
 80010f0:	42a0      	cmp	r0, r4
 80010f2:	d007      	beq.n	8001104 <sbrk_aligned+0x38>
 80010f4:	1a21      	subs	r1, r4, r0
 80010f6:	4628      	mov	r0, r5
 80010f8:	f000 f87c 	bl	80011f4 <_sbrk_r>
 80010fc:	3001      	adds	r0, #1
 80010fe:	d101      	bne.n	8001104 <sbrk_aligned+0x38>
 8001100:	f04f 34ff 	mov.w	r4, #4294967295
 8001104:	4620      	mov	r0, r4
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	20000118 	.word	0x20000118

0800110c <_malloc_r>:
 800110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001110:	1ccd      	adds	r5, r1, #3
 8001112:	f025 0503 	bic.w	r5, r5, #3
 8001116:	3508      	adds	r5, #8
 8001118:	2d0c      	cmp	r5, #12
 800111a:	bf38      	it	cc
 800111c:	250c      	movcc	r5, #12
 800111e:	2d00      	cmp	r5, #0
 8001120:	4607      	mov	r7, r0
 8001122:	db01      	blt.n	8001128 <_malloc_r+0x1c>
 8001124:	42a9      	cmp	r1, r5
 8001126:	d905      	bls.n	8001134 <_malloc_r+0x28>
 8001128:	230c      	movs	r3, #12
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	2600      	movs	r6, #0
 800112e:	4630      	mov	r0, r6
 8001130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001134:	4e2e      	ldr	r6, [pc, #184]	; (80011f0 <_malloc_r+0xe4>)
 8001136:	f000 f907 	bl	8001348 <__malloc_lock>
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	461c      	mov	r4, r3
 800113e:	bb34      	cbnz	r4, 800118e <_malloc_r+0x82>
 8001140:	4629      	mov	r1, r5
 8001142:	4638      	mov	r0, r7
 8001144:	f7ff ffc2 	bl	80010cc <sbrk_aligned>
 8001148:	1c43      	adds	r3, r0, #1
 800114a:	4604      	mov	r4, r0
 800114c:	d14d      	bne.n	80011ea <_malloc_r+0xde>
 800114e:	6834      	ldr	r4, [r6, #0]
 8001150:	4626      	mov	r6, r4
 8001152:	2e00      	cmp	r6, #0
 8001154:	d140      	bne.n	80011d8 <_malloc_r+0xcc>
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	4631      	mov	r1, r6
 800115a:	4638      	mov	r0, r7
 800115c:	eb04 0803 	add.w	r8, r4, r3
 8001160:	f000 f848 	bl	80011f4 <_sbrk_r>
 8001164:	4580      	cmp	r8, r0
 8001166:	d13a      	bne.n	80011de <_malloc_r+0xd2>
 8001168:	6821      	ldr	r1, [r4, #0]
 800116a:	3503      	adds	r5, #3
 800116c:	1a6d      	subs	r5, r5, r1
 800116e:	f025 0503 	bic.w	r5, r5, #3
 8001172:	3508      	adds	r5, #8
 8001174:	2d0c      	cmp	r5, #12
 8001176:	bf38      	it	cc
 8001178:	250c      	movcc	r5, #12
 800117a:	4629      	mov	r1, r5
 800117c:	4638      	mov	r0, r7
 800117e:	f7ff ffa5 	bl	80010cc <sbrk_aligned>
 8001182:	3001      	adds	r0, #1
 8001184:	d02b      	beq.n	80011de <_malloc_r+0xd2>
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	442b      	add	r3, r5
 800118a:	6023      	str	r3, [r4, #0]
 800118c:	e00e      	b.n	80011ac <_malloc_r+0xa0>
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	1b52      	subs	r2, r2, r5
 8001192:	d41e      	bmi.n	80011d2 <_malloc_r+0xc6>
 8001194:	2a0b      	cmp	r2, #11
 8001196:	d916      	bls.n	80011c6 <_malloc_r+0xba>
 8001198:	1961      	adds	r1, r4, r5
 800119a:	42a3      	cmp	r3, r4
 800119c:	6025      	str	r5, [r4, #0]
 800119e:	bf18      	it	ne
 80011a0:	6059      	strne	r1, [r3, #4]
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	bf08      	it	eq
 80011a6:	6031      	streq	r1, [r6, #0]
 80011a8:	5162      	str	r2, [r4, r5]
 80011aa:	604b      	str	r3, [r1, #4]
 80011ac:	4638      	mov	r0, r7
 80011ae:	f104 060b 	add.w	r6, r4, #11
 80011b2:	f000 f8cf 	bl	8001354 <__malloc_unlock>
 80011b6:	f026 0607 	bic.w	r6, r6, #7
 80011ba:	1d23      	adds	r3, r4, #4
 80011bc:	1af2      	subs	r2, r6, r3
 80011be:	d0b6      	beq.n	800112e <_malloc_r+0x22>
 80011c0:	1b9b      	subs	r3, r3, r6
 80011c2:	50a3      	str	r3, [r4, r2]
 80011c4:	e7b3      	b.n	800112e <_malloc_r+0x22>
 80011c6:	6862      	ldr	r2, [r4, #4]
 80011c8:	42a3      	cmp	r3, r4
 80011ca:	bf0c      	ite	eq
 80011cc:	6032      	streq	r2, [r6, #0]
 80011ce:	605a      	strne	r2, [r3, #4]
 80011d0:	e7ec      	b.n	80011ac <_malloc_r+0xa0>
 80011d2:	4623      	mov	r3, r4
 80011d4:	6864      	ldr	r4, [r4, #4]
 80011d6:	e7b2      	b.n	800113e <_malloc_r+0x32>
 80011d8:	4634      	mov	r4, r6
 80011da:	6876      	ldr	r6, [r6, #4]
 80011dc:	e7b9      	b.n	8001152 <_malloc_r+0x46>
 80011de:	230c      	movs	r3, #12
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4638      	mov	r0, r7
 80011e4:	f000 f8b6 	bl	8001354 <__malloc_unlock>
 80011e8:	e7a1      	b.n	800112e <_malloc_r+0x22>
 80011ea:	6025      	str	r5, [r4, #0]
 80011ec:	e7de      	b.n	80011ac <_malloc_r+0xa0>
 80011ee:	bf00      	nop
 80011f0:	20000114 	.word	0x20000114

080011f4 <_sbrk_r>:
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	4d06      	ldr	r5, [pc, #24]	; (8001210 <_sbrk_r+0x1c>)
 80011f8:	2300      	movs	r3, #0
 80011fa:	4604      	mov	r4, r0
 80011fc:	4608      	mov	r0, r1
 80011fe:	602b      	str	r3, [r5, #0]
 8001200:	f7ff fafc 	bl	80007fc <_sbrk>
 8001204:	1c43      	adds	r3, r0, #1
 8001206:	d102      	bne.n	800120e <_sbrk_r+0x1a>
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	b103      	cbz	r3, 800120e <_sbrk_r+0x1a>
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	2000011c 	.word	0x2000011c

08001214 <__sread>:
 8001214:	b510      	push	{r4, lr}
 8001216:	460c      	mov	r4, r1
 8001218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800121c:	f000 f8a0 	bl	8001360 <_read_r>
 8001220:	2800      	cmp	r0, #0
 8001222:	bfab      	itete	ge
 8001224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001226:	89a3      	ldrhlt	r3, [r4, #12]
 8001228:	181b      	addge	r3, r3, r0
 800122a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800122e:	bfac      	ite	ge
 8001230:	6563      	strge	r3, [r4, #84]	; 0x54
 8001232:	81a3      	strhlt	r3, [r4, #12]
 8001234:	bd10      	pop	{r4, pc}

08001236 <__swrite>:
 8001236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800123a:	461f      	mov	r7, r3
 800123c:	898b      	ldrh	r3, [r1, #12]
 800123e:	05db      	lsls	r3, r3, #23
 8001240:	4605      	mov	r5, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4616      	mov	r6, r2
 8001246:	d505      	bpl.n	8001254 <__swrite+0x1e>
 8001248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800124c:	2302      	movs	r3, #2
 800124e:	2200      	movs	r2, #0
 8001250:	f000 f868 	bl	8001324 <_lseek_r>
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800125a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800125e:	81a3      	strh	r3, [r4, #12]
 8001260:	4632      	mov	r2, r6
 8001262:	463b      	mov	r3, r7
 8001264:	4628      	mov	r0, r5
 8001266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	f000 b817 	b.w	800129c <_write_r>

0800126e <__sseek>:
 800126e:	b510      	push	{r4, lr}
 8001270:	460c      	mov	r4, r1
 8001272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001276:	f000 f855 	bl	8001324 <_lseek_r>
 800127a:	1c43      	adds	r3, r0, #1
 800127c:	89a3      	ldrh	r3, [r4, #12]
 800127e:	bf15      	itete	ne
 8001280:	6560      	strne	r0, [r4, #84]	; 0x54
 8001282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800128a:	81a3      	strheq	r3, [r4, #12]
 800128c:	bf18      	it	ne
 800128e:	81a3      	strhne	r3, [r4, #12]
 8001290:	bd10      	pop	{r4, pc}

08001292 <__sclose>:
 8001292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001296:	f000 b813 	b.w	80012c0 <_close_r>
	...

0800129c <_write_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	4d07      	ldr	r5, [pc, #28]	; (80012bc <_write_r+0x20>)
 80012a0:	4604      	mov	r4, r0
 80012a2:	4608      	mov	r0, r1
 80012a4:	4611      	mov	r1, r2
 80012a6:	2200      	movs	r2, #0
 80012a8:	602a      	str	r2, [r5, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	f7ff fa55 	bl	800075a <_write>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	d102      	bne.n	80012ba <_write_r+0x1e>
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	b103      	cbz	r3, 80012ba <_write_r+0x1e>
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
 80012bc:	2000011c 	.word	0x2000011c

080012c0 <_close_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4d06      	ldr	r5, [pc, #24]	; (80012dc <_close_r+0x1c>)
 80012c4:	2300      	movs	r3, #0
 80012c6:	4604      	mov	r4, r0
 80012c8:	4608      	mov	r0, r1
 80012ca:	602b      	str	r3, [r5, #0]
 80012cc:	f7ff fa61 	bl	8000792 <_close>
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	d102      	bne.n	80012da <_close_r+0x1a>
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	b103      	cbz	r3, 80012da <_close_r+0x1a>
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	2000011c 	.word	0x2000011c

080012e0 <_fstat_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4d07      	ldr	r5, [pc, #28]	; (8001300 <_fstat_r+0x20>)
 80012e4:	2300      	movs	r3, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	602b      	str	r3, [r5, #0]
 80012ee:	f7ff fa5c 	bl	80007aa <_fstat>
 80012f2:	1c43      	adds	r3, r0, #1
 80012f4:	d102      	bne.n	80012fc <_fstat_r+0x1c>
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	b103      	cbz	r3, 80012fc <_fstat_r+0x1c>
 80012fa:	6023      	str	r3, [r4, #0]
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
 80012fe:	bf00      	nop
 8001300:	2000011c 	.word	0x2000011c

08001304 <_isatty_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d06      	ldr	r5, [pc, #24]	; (8001320 <_isatty_r+0x1c>)
 8001308:	2300      	movs	r3, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	602b      	str	r3, [r5, #0]
 8001310:	f7ff fa5b 	bl	80007ca <_isatty>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_isatty_r+0x1a>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_isatty_r+0x1a>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	2000011c 	.word	0x2000011c

08001324 <_lseek_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4d07      	ldr	r5, [pc, #28]	; (8001344 <_lseek_r+0x20>)
 8001328:	4604      	mov	r4, r0
 800132a:	4608      	mov	r0, r1
 800132c:	4611      	mov	r1, r2
 800132e:	2200      	movs	r2, #0
 8001330:	602a      	str	r2, [r5, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	f7ff fa54 	bl	80007e0 <_lseek>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d102      	bne.n	8001342 <_lseek_r+0x1e>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	b103      	cbz	r3, 8001342 <_lseek_r+0x1e>
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	bd38      	pop	{r3, r4, r5, pc}
 8001344:	2000011c 	.word	0x2000011c

08001348 <__malloc_lock>:
 8001348:	4801      	ldr	r0, [pc, #4]	; (8001350 <__malloc_lock+0x8>)
 800134a:	f7ff be0b 	b.w	8000f64 <__retarget_lock_acquire_recursive>
 800134e:	bf00      	nop
 8001350:	20000110 	.word	0x20000110

08001354 <__malloc_unlock>:
 8001354:	4801      	ldr	r0, [pc, #4]	; (800135c <__malloc_unlock+0x8>)
 8001356:	f7ff be06 	b.w	8000f66 <__retarget_lock_release_recursive>
 800135a:	bf00      	nop
 800135c:	20000110 	.word	0x20000110

08001360 <_read_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d07      	ldr	r5, [pc, #28]	; (8001380 <_read_r+0x20>)
 8001364:	4604      	mov	r4, r0
 8001366:	4608      	mov	r0, r1
 8001368:	4611      	mov	r1, r2
 800136a:	2200      	movs	r2, #0
 800136c:	602a      	str	r2, [r5, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f7ff f9d6 	bl	8000720 <_read>
 8001374:	1c43      	adds	r3, r0, #1
 8001376:	d102      	bne.n	800137e <_read_r+0x1e>
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	b103      	cbz	r3, 800137e <_read_r+0x1e>
 800137c:	6023      	str	r3, [r4, #0]
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	2000011c 	.word	0x2000011c

08001384 <_init>:
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001386:	bf00      	nop
 8001388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138a:	bc08      	pop	{r3}
 800138c:	469e      	mov	lr, r3
 800138e:	4770      	bx	lr

08001390 <_fini>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr
